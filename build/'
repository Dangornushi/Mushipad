#include "EditWindow.hpp"

#include "CommandWindow.hpp"
#include "MainWindow.hpp"

int WIDTH;
int HEIGHT;
//int xpos;
//int ypos;
int mode;
int lineNumLine;

int Loop = TRUE;

string MainWindow::bufferName;

void EditWindow::editRun() {
    canINPUT = FALSE;
    printf("\033[2J"); //画面クリア
    EditWindow::xpos = LineBase+1;
    EditWindow::ypos = 0;
    printf("\033[0;0H");

    SET_TITLE(MainWindow::bufferName);
    drawEditWindow();
    while (Loop) {
        moveCursor();
		if (canINPUT)  {
			input ();
		}
    }
}

void EditWindow::moveCursor() {
    int cha = 0;
    cha = getch();
    printf("\033[%d;%dH", EditWindow::ypos, EditWindow::xpos);
    switch (cha) {
        case 'j': {
            if (EditWindow::ypos <= buffer.size())
                ypos++;
            xpos = buffer[EditWindow::ypos - 2].length() + LineBase + 1;
        } break;
        case 'k': {
            if (ypos > 0)
                ypos--;
			xpos = buffer[EditWindow::ypos-2].length()+LineBase+1;
        } break;
        case 'h': {
            if (EditWindow::xpos > LineBase+1)
                EditWindow::xpos--;
        } break;
        case 'l': {
            if (EditWindow::xpos < buffer[EditWindow::ypos-2].length()+LineBase+1)
            	EditWindow::xpos++;
        } break;
        case 'i': {
            canINPUT = TRUE;
        } break;
        case ':': {
            mode = 2;
			Loop = FALSE;
        } break;
        case 27: {
            mode = 0;
        } break;
        default:
            break;
	}
    printf("\033[%d;%dH", EditWindow::ypos, EditWindow::xpos);
}

void EditWindow::drawEditWindow() {
    for (int i = 0; i < editH; i++) {
        if (i < size(buffer)) {
			lineNumDraw(i + 1, LineBase - 3);
			cout << buffer[i];
            cout << endl;
        } else
            // 空の場合の場所埋め
            emptyLineDraw();
    }
}

void EditWindow::lineNumDraw(int line, int W) {
    cout << " " << flush;
    cout << line << flush;
    for (int i = 0; i < W - Main::digit(line); i++) {
        cout << " " << flush;
    }
    cout << "| " << flush;
}

void EditWindow::input() {

    while (canINPUT) {
        int key = getch();
        // addStr = "";

        switch (key) {
            case 10:
            case 27: {
                canINPUT = FALSE;
            } break;
            case '\t': {
                for (int i = 4; i > 0; i--) {
                    string addStr(1, ' ');
                    buffer[ypos].insert(xpos, addStr);
                    xpos++;
                }
            } break;
            default: {
                string addStr(1, (char)key);
                buffer[ypos].resize(buffer[ypos].length() + 1);
                buffer[ypos].insert(xpos, addStr);
                xpos++;
            } break;
        }
    }
}

void EditWindow::emptyLineDraw() {
    cout << "-" << endl;
}

void EditWindow::fileDataDraw() {}

void EditWindow::enter() {}
void EditWindow::esc() {}

vector<string> EditWindow::addEnter(vector<string> arr, int index) {
    string tmp1, tmp2 = "";
    arr.resize(size(arr) + 1);
    for (int i = index + 1; i < size(arr); i++) {
        printf("\033[%dB", i);
        printf("\033[2K");
        printf("\033[%dA", i);
        tmp1 = arr[i];
        arr[i] = tmp2;
        tmp2 = tmp1;
    }
    return arr;
}
